{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-lakefs","text":"<p>Prefect integrations for interacting with LakeFS services.</p>"},{"location":"#welcome","title":"Welcome!","text":"<p><code>prefect-lakefs</code> is a collection of Prefect tasks and flows which can be used to interact with lakeFS managed datalakes.</p> <p>Jump to examples.</p>"},{"location":"#resources","title":"Resources","text":"<p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-lakefs</code> with <code>pip</code>:</p> <pre><code>pip install prefect-lakefs\n</code></pre> <p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#example-usage","title":"Example Usage","text":""},{"location":"#configure-lakefs-credentials-and-dive-in","title":"Configure LakeFS Credentials and dive in.","text":"<pre><code>import asyncio\n\nfrom prefect_lakefs.credentials import LakeFSCredentials\nfrom prefect_lakefs.tasks import list_branches\n\n# You can configure this while adding a block in the prefect-ui or\n#   you can save the block using .save() utility method provided by the block.\nlakefs_creds = LakeFSCredentials(\n        endpoint_url=\"http://localhost:8000/api/v1\",\n        access_key_id=\"AKIAIOSFODNN7EXAMPLE\",\n        secret_access_key=\"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n    ).save(\"lakefs-creds\")\n\n\n@flow\ndef list_branches_for_example_repo():\n    branches = list_branches(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n    )\n    print(branches)\n\n\n\nif __name__ == \"__main__\":\n    # run the flow\n    asyncio.run(list_branches())\n</code></pre>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-lakefs</code>, feel free to open an issue in the prefect-lakefs repository.</p> <p>If you have any questions or issues while using <code>prefect-lakefs</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community or the LakeFS Slack Community.</p> <p>Feel free to star or watch <code>prefect-lakefs</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-lakefs</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"branches/","title":"Branches","text":""},{"location":"branches/#prefect_lakefs.branches","title":"<code>prefect_lakefs.branches</code>","text":"<p>Module for interacting with LakeFS branches from Prefect flows.</p>"},{"location":"branches/#prefect_lakefs.branches-classes","title":"Classes","text":""},{"location":"branches/#prefect_lakefs.branches-functions","title":"Functions","text":""},{"location":"branches/#prefect_lakefs.branches.cherry_pick","title":"<code>cherry_pick</code>  <code>async</code>","text":"<p>cherry-pick a ref and apply to branch for the lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>branch</code> <code>str</code> <p>name of the branch to apply the changes.</p> required <code>cherry_pick_ref</code> <code>str</code> <p>ref id of the changes to apply.</p> required <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Commit</code> <p>A LakeFS <code>Commit</code> object.</p> Example <p>cheery-pick ref <code>exp_commit_sha</code> on branch named <code>feature</code> for repository named <code>example</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import cherry_pick\n\n@flow\ndef cherry_pick_for_example_repo():\n    applied = cherry_pick(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        branch=\"feature\",\n        cherry_pick_ref=\"exp_commit_sha\",\n    )\n</code></pre> Source code in <code>prefect_lakefs/branches.py</code> <pre><code>@task\nasync def cherry_pick(\n    repository: str,\n    branch: str,\n    cherry_pick_ref: str,\n    lakefs_credentials: LakeFSCredentials,\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; Commit:\n\"\"\"cherry-pick a ref and apply to branch for the lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        branch: name of the branch to apply the changes.\n        cherry_pick_ref: ref id of the changes to apply.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        A LakeFS `Commit` object.\n\n    Example:\n        cheery-pick ref `exp_commit_sha` on branch named `feature` for\n        repository named `example`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import cherry_pick\n\n        @flow\n        def cherry_pick_for_example_repo():\n            applied = cherry_pick(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                branch=\"feature\",\n                cherry_pick_ref=\"exp_commit_sha\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"branches\") as branches:\n        return await run_sync_in_worker_thread(\n            branches.cherry_pick,\n            repository=repository,\n            branch=branch,\n            cherry_pick_creation=CherryPickCreation(ref=cherry_pick_ref),\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"branches/#prefect_lakefs.branches.create_branch","title":"<code>create_branch</code>  <code>async</code>","text":"<p>create branch for the lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>name</code> <code>str</code> <p>name of the branch to be created.</p> required <code>source</code> <code>str</code> <p>Source ref id for the branch to be created.</p> <code>'main'</code> <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>string contaiing the branch id.</p> Example <p>Create branch named <code>feature</code> for repository named <code>example</code>: <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import create_branch\n\n@flow\ndef create_branch_for_example_repo():\n    branch = create_branch(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        name=\"feature\",\n        source=\"main\",\n    )\n</code></pre></p> Source code in <code>prefect_lakefs/branches.py</code> <pre><code>@task\nasync def create_branch(\n    repository: str,\n    name: str,\n    lakefs_credentials: LakeFSCredentials,\n    source: str = \"main\",\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; str:\n\"\"\"create branch for the lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        name: name of the branch to be created.\n        source: Source ref id for the branch to be created.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        string contaiing the branch id.\n\n    Example:\n        Create branch named `feature` for repository named `example`:\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import create_branch\n\n        @flow\n        def create_branch_for_example_repo():\n            branch = create_branch(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                name=\"feature\",\n                source=\"main\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"branches\") as branches:\n        return await run_sync_in_worker_thread(\n            branches.create_branch,\n            repository=repository,\n            branch_creation=BranchCreation(name=name, source=source),\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"branches/#prefect_lakefs.branches.delete_branch","title":"<code>delete_branch</code>  <code>async</code>","text":"<p>delete branch for the lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>branch</code> <code>str</code> <p>name of the branch to delete.</p> required <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>delete branch named <code>feature</code> for repository named <code>example</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import delete_branch\n\n@flow\ndef delete_branch_for_example_repo():\n    delete_branch(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        branch=\"feature\",\n    )\n</code></pre> Source code in <code>prefect_lakefs/branches.py</code> <pre><code>@task\nasync def delete_branch(\n    repository: str,\n    branch: str,\n    lakefs_credentials: LakeFSCredentials,\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; None:\n\"\"\"delete branch for the lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        branch: name of the branch to delete.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        None\n\n    Example:\n        delete branch named `feature` for repository named `example`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import delete_branch\n\n        @flow\n        def delete_branch_for_example_repo():\n            delete_branch(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                branch=\"feature\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"branches\") as branches:\n        return await run_sync_in_worker_thread(\n            branches.delete_branch,\n            repository=repository,\n            branch=branch,\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"branches/#prefect_lakefs.branches.diff_branch","title":"<code>diff_branch</code>  <code>async</code>","text":"<p>diff branch for the lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>branch</code> <code>str</code> <p>name of the branch to fetch the diff list.</p> required <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DiffList</code> <p>A LakeFS <code>DiffList</code> object.</p> Example <p>get diff for a branch named <code>feature</code> for repository named <code>example</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import diff_branch\n\n@flow\ndef diff_branch_for_example_repo():\n    diff_list = diff_branch(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        branch=\"feature\",\n    )\n</code></pre> Source code in <code>prefect_lakefs/branches.py</code> <pre><code>@task\nasync def diff_branch(\n    repository: str,\n    branch: str,\n    lakefs_credentials: LakeFSCredentials,\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; DiffList:\n\"\"\"diff branch for the lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        branch: name of the branch to fetch the diff list.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        A LakeFS `DiffList` object.\n\n    Example:\n        get diff for a branch named `feature` for repository named `example`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import diff_branch\n\n        @flow\n        def diff_branch_for_example_repo():\n            diff_list = diff_branch(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                branch=\"feature\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"branches\") as branches:\n        return await run_sync_in_worker_thread(\n            branches.diff_branch,\n            repository=repository,\n            branch=branch,\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"branches/#prefect_lakefs.branches.get_branch","title":"<code>get_branch</code>  <code>async</code>","text":"<p>get branch details for the lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>branch</code> <code>str</code> <p>name of the branch to fetch the details.</p> required <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Ref</code> <p>A LakeFS <code>Ref</code> object.</p> Example <p>get details for a branch named <code>feature</code> for repository named <code>example</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import get_branch\n\n@flow\ndef get_branch_for_example_repo():\n    branch = get_branch(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        branch=\"feature\",\n    )\n</code></pre> Source code in <code>prefect_lakefs/branches.py</code> <pre><code>@task\nasync def get_branch(\n    repository: str,\n    branch: str,\n    lakefs_credentials: LakeFSCredentials,\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; Ref:\n\"\"\"get branch details for the lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        branch: name of the branch to fetch the details.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        A LakeFS `Ref` object.\n\n    Example:\n        get details for a branch named `feature` for repository named `example`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import get_branch\n\n        @flow\n        def get_branch_for_example_repo():\n            branch = get_branch(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                branch=\"feature\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"branches\") as branches:\n        return await run_sync_in_worker_thread(\n            branches.get_branch,\n            repository=repository,\n            branch=branch,\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"branches/#prefect_lakefs.branches.list_branches","title":"<code>list_branches</code>  <code>async</code>","text":"<p>list branches for the lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>RefList</code> <p>A LakeFS <code>RefList</code> object.</p> Example <p>List branches for repository named \"example\": <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import list_branches\n\n@flow\ndef list_branches_for_example_repo():\n    branches = list_branches(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n    )\n</code></pre></p> Source code in <code>prefect_lakefs/branches.py</code> <pre><code>@task\nasync def list_branches(\n    repository: str,\n    lakefs_credentials: LakeFSCredentials,\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; RefList:\n\"\"\"list branches for the lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        A LakeFS `RefList` object.\n\n    Example:\n        List branches for repository named \"example\":\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import list_branches\n\n        @flow\n        def list_branches_for_example_repo():\n            branches = list_branches(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n            )\n        ```\n    \"\"\"\n\n    # TODO: check for async_req flag and propagate accordingly.\n    with lakefs_credentials.get_client(\"branches\") as branches:\n        return await run_sync_in_worker_thread(\n            branches.list_branches,\n            repository=repository,\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"branches/#prefect_lakefs.branches.reset_branch","title":"<code>reset_branch</code>  <code>async</code>","text":"<p>reset branch for the lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>branch</code> <code>str</code> <p>name of the branch to reset.</p> required <code>reset_type</code> <code>str</code> <p>string value of an enum containing \"object\", \"common_prefix\", \"reset\". defaults to \"reset\".</p> <code>'reset'</code> <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>reset changes on a branch named <code>feature</code> for repository named <code>example</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import reset_branch\n\n@flow\ndef reset_branch_for_example_repo():\n    reset_branch(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        branch=\"feature\",\n    )\n</code></pre> Source code in <code>prefect_lakefs/branches.py</code> <pre><code>@task\nasync def reset_branch(\n    repository: str,\n    branch: str,\n    lakefs_credentials: LakeFSCredentials,\n    reset_type: str = \"reset\",\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; None:\n\"\"\"reset branch for the lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        branch: name of the branch to reset.\n        reset_type: string value of an enum containing \"object\", \"common_prefix\",\n            \"reset\". defaults to \"reset\".\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        None\n\n    Example:\n        reset changes on a branch named `feature` for repository named `example`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import reset_branch\n\n        @flow\n        def reset_branch_for_example_repo():\n            reset_branch(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                branch=\"feature\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"branches\") as branches:\n        return await run_sync_in_worker_thread(\n            branches.reset_branch,\n            repository=repository,\n            branch=branch,\n            reset_creation=ResetCreation(type=reset_type),\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"branches/#prefect_lakefs.branches.revert_branch","title":"<code>revert_branch</code>  <code>async</code>","text":"<p>revert commit for branch for the lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>branch</code> <code>str</code> <p>name of the branch to apply revert.</p> required <code>revert_ref</code> <code>str</code> <p>string value of a ref to revert.</p> required <code>parent_number</code> <code>int</code> <p>number representing parent index(based 1) to pick in case of reverting merge commits. Defaults to 1.</p> <code>1</code> <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>revert changes on a branch named <code>feature</code> for repository named <code>example</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import revert_branch\n\n@flow\ndef reset_branch_for_example_repo():\n    revert_branch(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        branch=\"feature\",\n        revert_ref=\"exp_commit_sha\",\n    )\n</code></pre> Source code in <code>prefect_lakefs/branches.py</code> <pre><code>@task\nasync def revert_branch(\n    repository: str,\n    branch: str,\n    revert_ref: str,\n    lakefs_credentials: LakeFSCredentials,\n    parent_number: int = 1,\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; None:\n\"\"\"revert commit for branch for the lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        branch: name of the branch to apply revert.\n        revert_ref: string value of a ref to revert.\n        parent_number: number representing parent index(based 1) to pick\n            in case of reverting merge commits. Defaults to 1.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        None\n\n    Example:\n        revert changes on a branch named `feature` for repository named `example`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import revert_branch\n\n        @flow\n        def reset_branch_for_example_repo():\n            revert_branch(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                branch=\"feature\",\n                revert_ref=\"exp_commit_sha\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"branches\") as branches:\n        return await run_sync_in_worker_thread(\n            branches.revert_branch,\n            repository=repository,\n            branch=branch,\n            revert_creation=RevertCreation(ref=revert_ref, parent_number=parent_number),\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"commits/","title":"Commits","text":""},{"location":"commits/#prefect_lakefs.commits","title":"<code>prefect_lakefs.commits</code>","text":"<p>Module for interacting with LakeFS commits api from Prefect flows.</p>"},{"location":"commits/#prefect_lakefs.commits-classes","title":"Classes","text":""},{"location":"commits/#prefect_lakefs.commits-functions","title":"Functions","text":""},{"location":"commits/#prefect_lakefs.commits.commit","title":"<code>commit</code>  <code>async</code>","text":"<p>commit to a branch of lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>branch</code> <code>str</code> <p>name of the branch to apply commit.</p> required <code>message</code> <code>str</code> <p>commit message about the changes.</p> required <code>metadata</code> <code>Dict[str, str]</code> <p>additional metadata and context.</p> required <code>date</code> <code>int</code> <p>epoch value of commit timestamp in seconds.</p> <code>int(datetime.now().timestamp())</code> <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Commit</code> <p>A LakeFS <code>Commit</code> object.</p> Example <p>commit to branch named <code>main</code> for repository named <code>example</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import commit\n\n@flow\ndef commit_to_main_example_repo():\n    applied_commit = commit(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        branch=\"main\",\n        message=\"commit message\",\n        metadata=dict(),\n    )\n</code></pre> Source code in <code>prefect_lakefs/commits.py</code> <pre><code>@task\nasync def commit(\n    repository: str,\n    branch: str,\n    message: str,\n    metadata: Dict[str, str],\n    lakefs_credentials: LakeFSCredentials,\n    date: int = int(datetime.now().timestamp()),\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; Commit:\n\"\"\"commit to a branch of lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        branch: name of the branch to apply commit.\n        message: commit message about the changes.\n        metadata: additional metadata and context.\n        date: epoch value of commit timestamp in seconds.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        A LakeFS `Commit` object.\n\n    Example:\n        commit to branch named `main` for repository named `example`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import commit\n\n        @flow\n        def commit_to_main_example_repo():\n            applied_commit = commit(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                branch=\"main\",\n                message=\"commit message\",\n                metadata=dict(),\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"commits\") as commits:\n        return await run_sync_in_worker_thread(\n            commits.commit,\n            repository=repository,\n            branch=branch,\n            commit_creation=CommitCreation(\n                message=message, metadata=metadata, date=date\n            ),\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"commits/#prefect_lakefs.commits.get_commit","title":"<code>get_commit</code>  <code>async</code>","text":"<p>fetch commit details of lakefs repository provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>commit_id</code> <code>str</code> <p>commit id to fetch details for.</p> required <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Commit</code> <p>A LakeFS <code>Commit</code> object.</p> Example <p>fetch commit from repository named <code>example</code> given commit_id <code>commmit_sha</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import get_commit\n\n@flow\ndef get_commit_for_example_repo():\n    commit = get_commit(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        commit_id=\"commit_sha\",\n    )\n</code></pre> Source code in <code>prefect_lakefs/commits.py</code> <pre><code>@task\nasync def get_commit(\n    repository: str,\n    commit_id: str,\n    lakefs_credentials: LakeFSCredentials,\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; Commit:\n\"\"\"fetch commit details of lakefs repository provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        commit_id: commit id to fetch details for.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        A LakeFS `Commit` object.\n\n    Example:\n        fetch commit from repository named `example` given commit_id `commmit_sha`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import get_commit\n\n        @flow\n        def get_commit_for_example_repo():\n            commit = get_commit(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                commit_id=\"commit_sha\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"commits\") as commits:\n        return await run_sync_in_worker_thread(\n            commits.get_commit,\n            repository=repository,\n            commit_id=commit_id,\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"commits/#prefect_lakefs.commits.log_branch_commits","title":"<code>log_branch_commits</code>  <code>async</code>","text":"<p>get commit log for a lakefs branch provided.</p> <p>Parameters:</p> Name Type Description Default <code>lakefs_credentials</code> <code>LakeFSCredentials</code> <p><code>LakeFSCredentials</code> block for creating authenticated LakeFS API clients.</p> required <code>repository</code> <code>str</code> <p>name of a lakefs repository.</p> required <code>branch</code> <code>str</code> <p>branch to fetch the commit log for.</p> required <code>**lakefs_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the LakeFS API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>CommitList</code> <p>A LakeFS <code>CommitList</code> object.</p> Example <p>get commit log from repository named <code>example</code> given branch <code>main</code>:</p> <pre><code>from prefect import flow\nfrom prefect_lakefs import LakeFSCredentials\nfrom prefect_lakefs.tasks import log_branch_commits\n\n@flow\ndef log_branch_commits_for_main_example_repo():\n    commit = log_branch_commits(\n        lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n        repository=\"example\",\n        branch=\"main\",\n    )\n</code></pre> Source code in <code>prefect_lakefs/commits.py</code> <pre><code>@task\nasync def log_branch_commits(\n    repository: str,\n    branch: str,\n    lakefs_credentials: LakeFSCredentials,\n    **lakefs_kwargs: Dict[str, Any],\n) -&gt; CommitList:\n\"\"\"get commit log for a lakefs branch provided.\n\n    Args:\n        lakefs_credentials: `LakeFSCredentials` block for creating\n            authenticated LakeFS API clients.\n        repository: name of a lakefs repository.\n        branch: branch to fetch the commit log for.\n        **lakefs_kwargs: Optional extra keyword arguments to pass to the LakeFS API.\n\n    Returns:\n        A LakeFS `CommitList` object.\n\n    Example:\n        get commit log from repository named `example` given branch `main`:\n\n        ```python\n        from prefect import flow\n        from prefect_lakefs import LakeFSCredentials\n        from prefect_lakefs.tasks import log_branch_commits\n\n        @flow\n        def log_branch_commits_for_main_example_repo():\n            commit = log_branch_commits(\n                lakefs_credentials=LakeFSCredentials.load(\"lakefs-creds\"),\n                repository=\"example\",\n                branch=\"main\",\n            )\n        ```\n    \"\"\"\n\n    with lakefs_credentials.get_client(\"commits\") as commits:\n        return await run_sync_in_worker_thread(\n            commits.log_branch_commits,\n            repository=repository,\n            branch=branch,\n            **lakefs_kwargs,\n        )\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_lakefs.credentials","title":"<code>prefect_lakefs.credentials</code>","text":""},{"location":"credentials/#prefect_lakefs.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_lakefs.credentials.LakeFSCredentials","title":"<code>LakeFSCredentials</code>","text":"<p>             Bases: <code>Block</code></p> <p>Credentials block for generating configured LakeFS API clients.</p> <p>Attributes:</p> Name Type Description <code>access_key_id</code> <code>Optional[str]</code> <p>s3 compatible access_key_id to initiate lakeFS client.</p> <code>secret_access_key</code> <code>Optional[SecretStr]</code> <p>s3 compatible secret_access_key to initiate lakeFS client.</p> <code>endpoint_url</code> <code>Optional[str]</code> <p>http/https url hosting the lakefs API.</p> Example <p>Load stored LakeFS credentials: <pre><code>from prefect_lakefs.credentials import LakeFSCredentials\n\nlakefs_credentials = LakeFSCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_lakefs/credentials.py</code> <pre><code>class LakeFSCredentials(Block):\n\n\"\"\"Credentials block for generating configured LakeFS API clients.\n\n    Attributes:\n        access_key_id: s3 compatible access_key_id to initiate lakeFS client.\n        secret_access_key: s3 compatible secret_access_key to initiate lakeFS client.\n        endpoint_url: http/https url hosting the lakefs API.\n\n    Example:\n        Load stored LakeFS credentials:\n        ```python\n        from prefect_lakefs.credentials import LakeFSCredentials\n\n        lakefs_credentials = LakeFSCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    access_key_id: Optional[str] = Field(\n        default=None,\n        description=\"A specific LakeFS access key ID.\",\n        title=\"LakeFS Access Key ID\",\n    )\n    secret_access_key: Optional[SecretStr] = Field(\n        default=None,\n        description=\"A specific LakeFS secret access key.\",\n        title=\"LakeFS Access Key Secret\",\n    )\n    endpoint_url: Optional[str] = Field(\n        default=\"http://localhost:8000/api/v1\",\n        description=\"A LakeFS URL.\",\n        title=\"LakeFS URL\",\n    )\n    repository: Optional[str] = Field(\n        description=\"Default LakeFS repository to use.\",\n        title=\"Default LakeFS repository\",\n    )\n    branch: Optional[str] = Field(\n        description=\"Default LakeFS branch to use.\",\n        title=\"Default LakeFS branch\",\n    )\n    _block_type_name = \"LakeFS Credentials\"\n    _block_type_slug = \"lakefs-credentials\"\n    # TODO: add lakefs logo_url\n    _logo_url = \"https://styles.redditmedia.com/t5_57y5vj/styles/communityIcon_oapa1t4myyu71.png?width=256&amp;v=enabled&amp;s=d3319b91ef0a5eea78e46242e07f2034834f31f7\"  # noqa\n    # TODO: add LakeFSCredentials doc slug\n    _documentation_url = \"https://prefecthq.github.io\"  # noqa\n    _documentation_url = \"https://limx0.github.io/prefect-lakefs/credentials/#prefect_lakefs.credentials.LakeFSCredentials\"  # noqa\n\n    @contextmanager\n    def get_client(\n        self,\n        client_type: Literal[\"branches\", \"commits\", \"objects\", \"repository\"],\n    ) -&gt; Generator[LakeFSClient, None, None]:\n\"\"\"Convenience method for retrieving a LakeFS API client for deployment resources.\n\n        Args:\n            client_type: The resource-specific type of LakeFS client to retrieve.\n\n        Yields:\n            An authenticated, resource-specific LakeFS API client.\n\n        Example:\n            ```python\n            from prefect_lakefs.credentials import LakeFSCredentials\n\n            with LakeFSCredentials.get_client(\"branches\") as branches:\n                for branch in branches.list_branches(repository=\"example\"):\n                    print(branch.id)\n            ```\n        \"\"\"\n\n        client_config = Configuration(\n            host=self.endpoint_url,\n            username=self.access_key_id,\n            password=self.secret_access_key.get_secret_value(),\n        )\n        with ApiClient(configuration=client_config) as generic_client:\n            try:\n                yield self.get_resource_specific_client(\n                    client_type,\n                    api_client=generic_client,\n                )\n            finally:\n                generic_client.rest_client.pool_manager.clear()\n\n    def get_resource_specific_client(\n        self,\n        client_type: str,\n        api_client: ApiClient,\n    ) -&gt; Union[BranchesApi, CommitsApi, ObjectsApi]:\n\"\"\"\n        Utility function for configuring a generic LakeFS client.\n\n        Args:\n            client_type: The lakefs API client type for interacting with specific\n                LakeFS resources.\n\n        Returns:\n            LakeFSClient: An authenticated, resource-specific LakeFS Client.\n\n        Raises:\n            ValueError: If `client_type` is not a valid LakeFS API client type.\n        \"\"\"\n\n        try:\n            return LAKEFS_CLIENT_TYPES[client_type](api_client=api_client)\n        except KeyError:\n            raise ValueError(\n                f\"Invalid client type provided '{client_type}'.\"\n                f\" Must be one of {listrepr(LAKEFS_CLIENT_TYPES.keys())}.\"\n            )\n</code></pre>"},{"location":"credentials/#prefect_lakefs.credentials.LakeFSCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_lakefs.credentials.LakeFSCredentials.get_client","title":"<code>get_client</code>","text":"<p>Convenience method for retrieving a LakeFS API client for deployment resources.</p> <p>Parameters:</p> Name Type Description Default <code>client_type</code> <code>Literal['branches', 'commits', 'objects', 'repository']</code> <p>The resource-specific type of LakeFS client to retrieve.</p> required <p>Yields:</p> Type Description <code>LakeFSClient</code> <p>An authenticated, resource-specific LakeFS API client.</p> Example <pre><code>from prefect_lakefs.credentials import LakeFSCredentials\n\nwith LakeFSCredentials.get_client(\"branches\") as branches:\n    for branch in branches.list_branches(repository=\"example\"):\n        print(branch.id)\n</code></pre> Source code in <code>prefect_lakefs/credentials.py</code> <pre><code>@contextmanager\ndef get_client(\n    self,\n    client_type: Literal[\"branches\", \"commits\", \"objects\", \"repository\"],\n) -&gt; Generator[LakeFSClient, None, None]:\n\"\"\"Convenience method for retrieving a LakeFS API client for deployment resources.\n\n    Args:\n        client_type: The resource-specific type of LakeFS client to retrieve.\n\n    Yields:\n        An authenticated, resource-specific LakeFS API client.\n\n    Example:\n        ```python\n        from prefect_lakefs.credentials import LakeFSCredentials\n\n        with LakeFSCredentials.get_client(\"branches\") as branches:\n            for branch in branches.list_branches(repository=\"example\"):\n                print(branch.id)\n        ```\n    \"\"\"\n\n    client_config = Configuration(\n        host=self.endpoint_url,\n        username=self.access_key_id,\n        password=self.secret_access_key.get_secret_value(),\n    )\n    with ApiClient(configuration=client_config) as generic_client:\n        try:\n            yield self.get_resource_specific_client(\n                client_type,\n                api_client=generic_client,\n            )\n        finally:\n            generic_client.rest_client.pool_manager.clear()\n</code></pre>"},{"location":"credentials/#prefect_lakefs.credentials.LakeFSCredentials.get_resource_specific_client","title":"<code>get_resource_specific_client</code>","text":"<p>Utility function for configuring a generic LakeFS client.</p> <p>Parameters:</p> Name Type Description Default <code>client_type</code> <code>str</code> <p>The lakefs API client type for interacting with specific LakeFS resources.</p> required <p>Returns:</p> Name Type Description <code>LakeFSClient</code> <code>Union[BranchesApi, CommitsApi, ObjectsApi]</code> <p>An authenticated, resource-specific LakeFS Client.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>client_type</code> is not a valid LakeFS API client type.</p> Source code in <code>prefect_lakefs/credentials.py</code> <pre><code>def get_resource_specific_client(\n    self,\n    client_type: str,\n    api_client: ApiClient,\n) -&gt; Union[BranchesApi, CommitsApi, ObjectsApi]:\n\"\"\"\n    Utility function for configuring a generic LakeFS client.\n\n    Args:\n        client_type: The lakefs API client type for interacting with specific\n            LakeFS resources.\n\n    Returns:\n        LakeFSClient: An authenticated, resource-specific LakeFS Client.\n\n    Raises:\n        ValueError: If `client_type` is not a valid LakeFS API client type.\n    \"\"\"\n\n    try:\n        return LAKEFS_CLIENT_TYPES[client_type](api_client=api_client)\n    except KeyError:\n        raise ValueError(\n            f\"Invalid client type provided '{client_type}'.\"\n            f\" Must be one of {listrepr(LAKEFS_CLIENT_TYPES.keys())}.\"\n        )\n</code></pre>"}]}